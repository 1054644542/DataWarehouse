radioButtons('quote', 'Quote',
c(None='',
'Double Quote'='"',
'Single Quote'="'"),
'Double Quote')
),
mainPanel(
tableOutput('contents')
)
))
server<-shinyServer(function(input, output) {
output$contents <- renderTable({
inFile <- input$file1
if (is.null(inFile))
return(NULL)
read.csv(inFile$datapath, header=input$header, sep=input$sep, quote=input$quote)
})
})
shinyApp(ui=ui,server=server)
ui<-shinyUI(pageWithSidebar(
headerPanel('Download Example'),
sidebarPanel(
selectInput("dataset", "Choose a dataset:",
choices = c("rock", "pressure", "cars")),
downloadButton('downloadData', 'Download')
),
mainPanel(
tableOutput('table')
)
))
server<-shinyServer(function(input, output) {
datasetInput <- reactive({
switch(input$dataset,
"rock" = rock,
"pressure" = pressure,
"cars" = cars)
})
output$table <- renderTable({
datasetInput()
})
output$downloadData <- downloadHandler(
filename = function() { paste(input$dataset, '.csv', sep='') },
content = function(file) {
write.csv(datasetInput(), file)
}
)
})
shinyApp(ui=ui,server=server)
runExample("08_html")
ui <- fluidPage(
headerPanel("mtcars data"),  #titlePanel("mtcars data")
sidebarLayout(
sidebarPanel(
selectInput("var1", "x轴",
c("mpg" = "mpg",
"disp" = "disp",
"hp" = "hp"),
selected = 'mpg'),
selectInput("var2", "y轴",
c("mpg" = "mpg",
"disp" = "disp",
"hp" = "hp"),
selected = 'hp'),
submitButton("Update View"),
radioButtons('dist','颜色',
c('cyl'='cyl',
'gear'='gear',
'carb'='carb')),
numericInput("var3","点样式",0,min=0,max=25),
sliderInput("var4", "点大小",
min = 0, max = 20, value = 5
)
),
mainPanel(
h2('散点图'),
plotOutput("distPlot")
)
)
)
# Define server
server <- function(input, output) {
attach(mtcars)
z1 <- reactive({
switch(input$dist,
'cyl' = cyl,
'gear' =gear,
'carb' = carb)
})
z2 <- reactive({
switch(input$var1,
'mpg' = mpg,
'disp' = disp,
'hp' = hp)
})
z3 <- reactive({
switch(input$var2,
'mpg' = mpg,
'disp' = disp,
'hp' = hp)
})
output$distPlot <- renderPlot({
plot(z2(),z3(),
pch=input$var3,
cex=input$var4,
col=z1())
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
# Define UI
ui <- fluidPage(
titlePanel("mtcars data"),
sidebarLayout(
sidebarPanel(
selectInput("var1", "x轴",
c("mpg" = "mpg",
"disp" = "disp",
"hp" = "hp"),
selected = 'mpg'),
selectInput("var2", "y轴",
c("mpg" = "mpg",
"disp" = "disp",
"hp" = "hp"),
selected = 'hp'
),
#submitButton("Update View"),
radioButtons('dist','颜色',
c('cyl'='cyl',
'gear'='gear',
'carb'='carb')),
numericInput("var3", "点样式", 0, min = 0, max = 25),
sliderInput("var4", "点大小",
min = 0, max = 20, value = 5
)
),
# Show a plot of the generated distribution
mainPanel(
h2('散点图'),
plotOutput("distPlot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
z1 <- switch(input$dist,
cyl = as.factor(mtcars$cyl),
gear = as.factor(mtcars$gear),
carb = as.factor(mtcars$carb))
z2 <- switch(input$var1,
mpg=mtcars$mpg,
disp=mtcars$disp,
hp=mtcars$hp)
z3 <- switch(input$var2,
mpg=mtcars$mpg,
disp=mtcars$disp,
hp=mtcars$hp)
ggplot(mtcars,aes(z2,z3,col=z1))+
geom_point(size=input$var4,shape=input$var3)+
theme_minimal()+
xlab(input$var1)+
ylab(input$var2)+
labs(col=input$dist)
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
library(shinythemes)
library(ggthemes)
# Define UI for application that draws a histogram
ui <- fluidPage(
theme=shinytheme("darkly"),
titlePanel("mtcars data"),
sidebarLayout(
sidebarPanel(
selectInput("var1", "x轴",
c("mpg" = "mpg",
"disp" = "disp",
"hp" = "hp"),
selected = 'mpg'),
selectInput("var2", "y轴",
c("mpg" = "mpg",
"disp" = "disp",
"hp" = "hp"),
selected = 'hp'
),
#submitButton("Update View"),
radioButtons('dist','颜色',
c('cyl'='cyl',
'gear'='gear',
'carb'='carb')),
numericInput("var3", "点样式", 0, min = 0, max = 25),
sliderInput("var4", "点大小",
min = 0, max = 20, value = 5
)
),
# Show a plot of the generated distribution
mainPanel(
h2('散点图'),
plotOutput("distPlot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
z1 <- switch(input$dist,
cyl = as.factor(mtcars$cyl),
gear = as.factor(mtcars$gear),
carb = as.factor(mtcars$carb))
z2 <- switch(input$var1,
mpg = mtcars$mpg,
disp = mtcars$disp,
hp = mtcars$hp)
z3 <- switch(input$var2,
mpg = mtcars$mpg,
disp = mtcars$disp,
hp = mtcars$hp)
ggplot(mtcars,aes(z2,z3,col=z1))+
geom_point(size=input$var4,
shape=input$var3)+
theme_economist()+
xlab(input$var1)+
ylab(input$var2)+
labs(col=input$dist)
})
}
# Run the application
shinyApp(ui = ui, server = server)
install.packages("shinytheme")
library("githubinstall", lib.loc="D:/R/R-3.4.0/library")
githubinstall("shinytheme")
githubinstall("shinytheme")
library("curl", lib.loc="D:/R/R-3.4.0/library")
githubinstall("shinytheme")
library("devtools", lib.loc="D:/R/R-3.4.0/library")
install.github("rstudio/shinythemes")
devtools::install_github('rstudio/shinythemes')
library(shiny)
library(ggplot2)
library(shinythemes)
library(ggthemes)
# Define UI for application that draws a histogram
ui <- fluidPage(
theme=shinytheme("darkly"),
titlePanel("mtcars data"),
sidebarLayout(
sidebarPanel(
selectInput("var1", "x轴",
c("mpg" = "mpg",
"disp" = "disp",
"hp" = "hp"),
selected = 'mpg'),
selectInput("var2", "y轴",
c("mpg" = "mpg",
"disp" = "disp",
"hp" = "hp"),
selected = 'hp'
),
#submitButton("Update View"),
radioButtons('dist','颜色',
c('cyl'='cyl',
'gear'='gear',
'carb'='carb')),
numericInput("var3", "点样式", 0, min = 0, max = 25),
sliderInput("var4", "点大小",
min = 0, max = 20, value = 5
)
),
# Show a plot of the generated distribution
mainPanel(
h2('散点图'),
plotOutput("distPlot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
z1 <- switch(input$dist,
cyl = as.factor(mtcars$cyl),
gear = as.factor(mtcars$gear),
carb = as.factor(mtcars$carb))
z2 <- switch(input$var1,
mpg = mtcars$mpg,
disp = mtcars$disp,
hp = mtcars$hp)
z3 <- switch(input$var2,
mpg = mtcars$mpg,
disp = mtcars$disp,
hp = mtcars$hp)
ggplot(mtcars,aes(z2,z3,col=z1))+
geom_point(size=input$var4,
shape=input$var3)+
theme_economist()+
xlab(input$var1)+
ylab(input$var2)+
labs(col=input$dist)
})
}
# Run the application
shinyApp(ui = ui, server = server)
ui <- fluidPage(
theme=shinytheme("cerulean"),
titlePanel("mtcars data"),
sidebarLayout(
sidebarPanel(
selectInput("var1", "x轴",
c("mpg" = "mpg",
"disp" = "disp",
"hp" = "hp"),
selected = 'mpg'),
selectInput("var2", "y轴",
c("mpg" = "mpg",
"disp" = "disp",
"hp" = "hp"),
selected = 'hp'
),
#submitButton("Update View"),
radioButtons('dist','颜色',
c('cyl'='cyl',
'gear'='gear',
'carb'='carb')),
numericInput("var3", "点样式", 0, min = 0, max = 25),
sliderInput("var4", "点大小",
min = 0, max = 20, value = 5
)
),
# Show a plot of the generated distribution
mainPanel(
h2('散点图'),
plotOutput("distPlot")
)
)
)
shinyApp(ui = ui, server = server)
install.packages("readr")
gam()
install.packages(c("irlba", "knitr", "shinydashboard", "tibble"))
library(rworldmap)
library(dplyr)
library(ggplot2)
library(geosphere)
library(gpclib)
library(animation)
install.packages("knitr")
worldMap <- getMap()
names(worldMap)
world.points <- fortify(worldMap)
world.df <- world.points[,c("long","lat","group", "region")]
world.points$region <- world.points$id
world.df <- world.points[,c("long","lat","group", "region")]
worldmap <- ggplot() +
geom_polygon(data = world.df, aes(x = long, y = lat, group = group)) +
scale_y_continuous(breaks = (-2:2) * 30) +
scale_x_continuous(breaks = (-4:4) * 45)
worldmap
?destPoint
p <- cbind(5,52)
p
str(p)
class(p)
d <- destPoint(p,30,10000)
list <- list(matrix(1:25, ncol = 5), matrix(4:28, ncol = 5), matrix(21:45, ncol=5))
list
list.sum<-do.call(sum,list)
list.sum
list.sum<-do.call(cbind,list)
list.sum
distantCircle <- function(x,radius) {
resul <- do.call("rbind", lapply(0:360, function(bearing){
res <- destPoint(p = x,b=bearing,d=radius)
rownames(res) <- NULL
return(data.frame(res))
}))
resul$dist <- radius / 1000
return(resul)
}
circle.1500 <- distantCircle(x=c(0.0000001,89.9999999),radius=1500*1000)
circle.3000 <- distantCircle(x=c(0.0000001,89.9999999),radius=3000*1000)
circles <- rbind(circle.1500, circle.3000)
circles$dist <- factor(circles$dist)
circles
rect.3000 <- cbind(long = c(-180,-180,180,180,-180),
lat = c(min(circle.3000$lat),90,90,min(circle.3000$lat), min(circle.3000$lat)))
rect.3000
?as
rect.3000.poly <- as(rect.3000,"gpc.poly")
rect.3000.poly
library(rvest)
url<-"https://rate.tmall.com/list_detail_rate.htm?itemId=521136254098&spuId=345965243&sellerId=2106525799&order=1&currentPage=1"
---
title: "R Notebook"
output: html_notebook
---
This is an [R Markdown](http://rmarkdown.rstudio.com) Notebook. When you execute code within the notebook, the results appear beneath the code.
Try executing this chunk by clicking the *Run* button within the chunk or by placing your cursor inside it and pressing *Ctrl+Shift+Enter*.
```{r}
plot(cars)
```
Add a new chunk by clicking the *Insert Chunk* button on the toolbar or by pressing *Ctrl+Alt+I*.
When you save the notebook, an HTML file containing the code and output will be saved alongside it (click the *Preview* button or press *Ctrl+Shift+K* to preview the HTML file).
install.packages(c("GlobalOptions", "hunspell", "mclust", "Rcpp"))
library("sp", lib.loc="D:/R/R-3.4.0/library")
r1 = cbind(c(180114, 180553, 181127, 181477, 181294, 181007, 180409,
180162, 180114), c(332349, 332057, 332342, 333250, 333558, 333676,
332618, 332413, 332349))
r2 = cbind(c(180042, 180545, 180553, 180314, 179955, 179142, 179437,
179524, 179979, 180042), c(332373, 332026, 331426, 330889, 330683,
331133, 331623, 332152, 332357, 332373))
r3 = cbind(c(179110, 179907, 180433, 180712, 180752, 180329, 179875,
179668, 179572, 179269, 178879, 178600, 178544, 179046, 179110),
c(331086, 330620, 330494, 330265, 330075, 330233, 330336, 330004,
329783, 329665, 329720, 329933, 330478, 331062, 331086))
r1
r2
r3
sr1=Polygons(list(Polygon(r1)),"r1")
sr2=Polygons(list(Polygon(r2)),"r2")
sr3=Polygons(list(Polygon(r3)),"r3")
sr1
sr=SpatialPolygons(list(sr1,sr2,sr3))
sr
srdf=SpatialPolygonsDataFrame(sr, data.frame(cbind(1:3,5:3), row.names=c("r1","r2","r3")))
srdf
data(meuse)
coordinates(meuse) = ~x+y
data(meuse.grid)
coordinates(meuse.grid) = ~x+y
gridded(meuse.grid) = TRUE
plot(meuse)
polygon(r1)
polygon(r2)
polygon(r3)
overlay(srdf, meuse)
over(sr, meuse[,1:4], fn = mean)
sapply(over(sr, geometry(meuse), returnList = TRUE), length)
data(meuse.grid)
coordinates(meuse.grid) = ~x+y
gridded(meuse.grid) = TRUE
over(sr, geometry(meuse))
over(sr, meuse)
library(ggplot2)
library(maps)
library(plyr)
library(grid)
library(xlsx)
library(RColorBrewer)
library(dplyr)
library(shiny)
library(shinythemes)
setwd("D:/R/mapdata/")
world_map<-map_data("world")
mydata<-read.csv("Word_State.csv",stringsAsFactors = FALSE,check.names = FALSE)
world_map_data<-merge(world_map,mydata,all.x=TRUE)%>%arrange(group,order)
ui <-shinyUI(fluidPage(
theme=shinytheme("cerulean"),
titlePanel("Data Control"),
sidebarLayout(
sidebarPanel(
radioButtons("var1","palette",
list("PiYG"="PiYG",
"PuOr"="PuOr",
"RdBu"="RdBu",
"RdYlBu"="RdYlBu",
"RdYlGn"="RdYlGn"),inline=TRUE),
br(),
sliderInput("var2",
"latitude",
min=-90,
max=90,
value=0,
step=15),
sliderInput("var3",
"longitude",
min=-180,
max=180,
value=0,
step=15),
sliderInput("var4",
"angle",
min=-180,
max=180,
value=0,
step=15)
),
mainPanel(h2('World Map'),plotOutput("distPlot"))
)
))
server<-shinyServer(function(input,output){
output$distPlot <- renderPlot({
ggplot()+
geom_polygon(data=world_map_data,aes(x=long,y=lat,group=group,fill=Address),colour="grey",size=.25)+
coord_map("ortho",orientation=c(input$var2,input$var3,input$var4))+
scale_y_continuous(breaks=(-6:6)*15) +
scale_x_continuous(breaks=(-12:12)*15)+
scale_fill_brewer(name="million($)",palette=input$var1)+
theme(
panel.background=element_rect(fill="white",colour=NA),
panel.grid.major = element_line(colour = "grey60",size=.25),
panel.grid.minor = element_line(colour = "grey60",size=.25),
axis.text=element_blank(),
axis.title=element_blank(),
axis.ticks=element_blank()
)
})
})
shinyApp(ui=ui,server=server)
