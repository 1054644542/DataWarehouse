library(ggplot2)
library(reshape2)
library(ggthemes)
ggplot(mpg,aes(cty,hwy))+geom_point(colour="black")+geom_line(colour="steelblue")
ggplot(mpg,aes(cty,hwy))+geom_point(colour="black")+geom_line(colour="steelblue")
?geom_point
rainbow(10)
library(scales)
show_col(rainbow(10),labels=T)
color<-show_col(rainbow(10),labels=T)
color
color<-rainbow(10)
color
colors()
library(RColorBrewer)
m1<-economist_pal()
show_col(m1)
m1<-economist_pal()(6)
economist_pal
library(ggthemes)
m1<-economist_pal()(6)
show_col(m1)
m1<-economist_pal()
show_col(m1)
ggthemes_data$wsj$bg
ggthemes_data$economist$bg
ggthemes_data$wsj$bg
library(ggplot2)
library(reshape2)
data<-data.frame(Name = c("苹果","谷歌","脸书","亚马逊","腾讯"),Company = c("Apple","Google","Facebook","Amozon","Tencent"),Sale2013 = c(5000,3500,2300,2100,3100),Sale2014 = c(5050,3800,2900,2500,3300),Sale2015 = c(5050,4000,3200,2800,3700),Sale2016 = c(6000,4800,4500,3500,4300))
mydata<-melt(data,id.vars=c("Name","Company"),variable.name="Year",value.name="Sale")
view(mydata)
mydata
View(mydata)
ggplot(newdata,aes(Company,Sale,group=Year,colour=Year))+geom_line()+geom_point()
ggplot(mydata,aes(Company,Sale,group=Year,colour=Year))+geom_line()+geom_point()
ggplot(mydata,aes(Company,Sale,colour=Year))+geom_line()+geom_point()
ggplot(newdata,aes(Company,Sale,group=Year,colour=Year))+geom_line()+geom_point()
ggplot(mydata,aes(Company,Sale,group=Year))+geom_line()+geom_point()
ggplot(mydata,aes(Company,Sale))+geom_line()+geom_point()
ggplot(data,aes(Company,Sale2013))+geom_line()+geom_point()
ggplot(data,aes(Company,Sale2013,group=1))+geom_line()+geom_point()
ggplot(mydata,aes(Company,Sale,group=Year,colour=Year))+geom_line()+geom_point(shape=10,size=3)
ggplot(mydata,aes(Company,Sale,group=Year,colour=Year))+geom_line()+geom_point(shape=23,size=3)
ggplot(mydata,aes(Company,Sale,group=Year,colour=Year))+geom_line()+geom_point(aes(shape=Year),size=3)
ggplot(mydata,aes(Company,Sale,group=Year))+geom_line()+geom_point(shape=22,size=3,colour="black",fill="red")
ggplot(mydata,aes(Company,Sale,group=Year))+geom_line()+geom_point(aes(shape=Sale),size=5,colour="black",fill="red")
ggplot(mydata,aes(Company,Sale,group=Year))+geom_line()+geom_point(aes(size=Year),shape=22,colour="black",fill="red")
library(ggplot2)
library(reshape2)
library(ggthemes)
library(RColorBrewer)
data<-data.frame(Name = c("苹果","谷歌","脸书","亚马逊","腾讯"),Company = c("Apple","Google","Facebook","Amozon","Tencent"),Sale2013 = c(5000,3500,2300,2100,3100),Sale2014 = c(5050,3800,2900,2500,3300),Sale2015 = c(5050,4000,3200,2800,3700),Sale2016 = c(6000,4800,4500,3500,4300))
mydata<-melt(data,id.vars=c("Name","Company"),variable.name="Year",value.name="Sale")
mydata
ggplot(mydata,aes(Company,Sale,fill=Year))+geom_line()
ggplot(mydata,aes(Company,Sale,fill=Year,group=Year))+geom_line()
ggplot(mydata,aes(Company,Sale,linetype=Year,group=Year))+geom_line()
ggplot(mydata,aes(Company,Sale,linetype=Year,col=Year,group=Year))+geom_line()
diamonds<-diamonds[1:100,]
ggplot(diamonds,aes(carat,price,colour=cut))+geom_point()
remove(dimnames())
remove(dimnames)
remove(diamonds)
ggplot(diamonds,aes(carat,price,colour=cut))+geom_point()
ggplot(diamonds,aes(carat,price,colour=depth))+geom_point()
diamonds<-diamonds[1:1000,]
ggplot(diamonds,aes(carat,price,colour=depth))+geom_point()
scale_fill_brewer
c<-c(50,30,50,70,90,40)
names(c)<-LETTERS[1:6]
mycolor<-brewer.pal(9,"Greens")
library(plyr)
mydata<-data.frame(c)
ggplot(data=mydata,aes(x=factor(1),y=c,fill=factor(c),order=desc(c)))+
geom_bar(stat="identity",width=1,col="white")+
coord_polar(theta = "y",start=0)+
theme(panel.grid = element_blank(),
panel.background = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
axis.title = element_blank())+
scale_fill_brewer(palette="Greens",labels=c("E", "D", "A","C","F","B"))+
guides(fill=guide_legend(reverse=TRUE,title=NULL))
library(leaflet)
m<-leaflet()%>%addTiles()
m %>%fitBounds(-73.9,40.75,-73.95,40.8) %>%addMeasure()
m %>%
fitBounds(13.76134, 52.675499, 13.0884, 52.33812) %>%   #设定版面呈现的地理区域范围
addMeasure(
position = "bottomleft",       #测距菜单位置
primaryLengthUnit = "meters",  #测量的点距离输出单位
primaryAreaUnit = "sqmeters",  #测量的闭合多边形区域面积输出单位
activeColor = "#3D535D",       #
completedColor = "#7D4479")
leaflet() %>% addTiles() %>% setView(0,0,2) %>% addGraticule()
leaflet() %>% addTiles() %>% setView(0,0,2) %>%
addGraticule(interval = 40, style = list(color = "#FF0000", weight = 1))
leaflet() %>% addTiles() %>% setView(0,0,2) %>%
addGraticule(interval = 5, style = list(color = "#FF0000", weight = 1))
leaflet() %>% addTiles() %>% setView(0,0,2) %>%
addGraticule(interval = 10, style = list(color = "#FF0000", weight = 1))
leaflet() %>% addTiles() %>% setView(0,0,2) %>%
addGraticule(group = "Graticule") %>%
addLayersControl(overlayGroups = c("Graticule"),options=layersControlOptions(collapsed = FALSE))
leaflet() %>% addTiles() %>% addTerminator()
leaflet() %>%
addTiles() %>%
addTerminator(
resolution=10,
time = "2013-06-20T21:00:00Z",
group = "daylight") %>%
addLayersControl(
overlayGroups = "daylight",
options = layersControlOptions(collapsed = FALSE))
leaflet() %>% setView(0,0,3) %>%
addProviderTiles(providers$Esri.WorldStreetMap) %>%
addMiniMap()
leaflet() %>% setView(0,0,3) %>%
addProviderTiles(providers$Esri.WorldStreetMap) %>%
addMiniMap(tiles = providers$Esri.WorldStreetMap,toggleDisplay = TRUE)
library(htmltools)
library(htmlwidgets)
leaflet() %>% addTiles() %>%
addEasyButton(easyButton(      #添加一键恢复初始窗口比利时
icon="fa-globe", title="Zoom to Level 1",
onClick=JS("function(btn, map){ map.setZoom(1); }"))) %>%
addEasyButton(easyButton(     #添加一键定位功能（根据你的所在位置）
icon="fa-crosshairs", title="Locate Me",
onClick=JS("function(btn, map){ map.locate({setView: true}); }")))
head(quakes)
length(quakes)
rnow(quakes)
nrow(quakes)
leaflet() %>% addTiles() %>%
addMarkers(data=quakes,
clusterOptions = markerClusterOptions(),
clusterId = "quakesCluster") %>%
addEasyButton(easyButton(
states = list(
easyButtonState(   #状态1：打开菜单，开启点聚合
stateName="unfrozen-markers",
icon="ion-toggle",
title="Freeze Clusters",
onClick = JS("
function(btn,map) {
var clusterManager =
map.layerManager.getLayer('cluster', 'quakesCluster');
clusterManager.freezeAtZoom();
btn.state('frozen-markers');
}")
),
easyButtonState( #状态2：关闭菜单，结束点聚合功能
stateName="frozen-markers",
icon="ion-toggle-filled",
title="UnFreeze Clusters",
onClick = JS("
function(btn, map) {
var clusterManager =
map.layerManager.getLayer('cluster', 'quakesCluster');
clusterManager.unfreeze();
btn.state('unfrozen-markers');
}")
)
)
))
esri <- grep("^Esri", providers, value = TRUE)
esri
for (provider in esri) {
mymap <-leaflet() %>% setView(0,0,3) %>% addProviderTiles(provider, group = provider)
}
mymap
mymap %>%
addLayersControl(baseGroups = names(esri),
options = layersControlOptions(collapsed = FALSE)) %>%
addMiniMap(tiles = esri[[1]], toggleDisplay = TRUE,
position = "bottomleft") %>%
htmlwidgets::onRender("
function(el, x) {
var myMap = this;
myMap.on('baselayerchange',
function (e) {
myMap.minimap.changeLayer(L.tileLayer.provider(e.name));
})
}")
l <- leaflet() %>% setView(0,0,3)
esri <- grep("^Esri", providers, value = TRUE)
for (provider in esri) {
l <- l %>% addProviderTiles(provider, group = provider)
}
l %>%
addLayersControl(baseGroups = names(esri),
options = layersControlOptions(collapsed = FALSE)) %>%
addMiniMap(tiles = esri[[1]], toggleDisplay = TRUE,
position = "bottomleft") %>%
htmlwidgets::onRender("
function(el, x) {
var myMap = this;
myMap.on('baselayerchange',
function (e) {
myMap.minimap.changeLayer(L.tileLayer.provider(e.name));
})
}")
esri <- grep("^Esri", providers, value = TRUE)
for (provider in esri) {
mymap <-leaflet() %>% setView(0,0,3) %>% addProviderTiles(provider, group = provider)
}
mymap %>%
addLayersControl(baseGroups = names(esri),
options = layersControlOptions(collapsed = FALSE)) %>%
addMiniMap(tiles = esri[[1]], toggleDisplay = TRUE,
position = "bottomleft") %>%
htmlwidgets::onRender("
function(el, x) {
var myMap = this;
myMap.on('baselayerchange',
function (e) {
myMap.minimap.changeLayer(L.tileLayer.provider(e.name));
})
}")
mymap<-leaflet() %>% setView(0,0,3)
esri <- grep("^Esri", providers, value = TRUE)
for (provider in esri) {
mymap <-mymap %>% addProviderTiles(provider, group = provider)
}
mymap %>%
addLayersControl(baseGroups = names(esri),
options = layersControlOptions(collapsed = FALSE)) %>%
addMiniMap(tiles = esri[[1]], toggleDisplay = TRUE,
position = "bottomleft") %>%
htmlwidgets::onRender("
function(el, x) {
var myMap = this;
myMap.on('baselayerchange',
function (e) {
myMap.minimap.changeLayer(L.tileLayer.provider(e.name));
})
}")
l <- leaflet() %>% setView(0,0,3)
esri <- grep("^Esri", providers, value = TRUE)
for (provider in esri) {
l <- l %>% addProviderTiles(provider, group = provider)
}
l %>%
addLayersControl(baseGroups = names(esri),
options = layersControlOptions(collapsed = FALSE)) %>%
addMiniMap(tiles = esri[[1]], toggleDisplay = TRUE,
position = "bottomleft") %>%
htmlwidgets::onRender("
function(el, x) {
var myMap = this;
myMap.on('baselayerchange',
function (e) {
myMap.minimap.changeLayer(L.tileLayer.provider(e.name));
})
}")
mymap %>%
addLayersControl(baseGroups = names(esri),
options = layersControlOptions(collapsed = FALSE)) %>%
addMiniMap(tiles = esri[[1]], toggleDisplay = TRUE,
position = "bottomleft") %>%
htmlwidgets::onRender("
function(el, x) {
var myMap = this;
myMap.on('baselayerchange',
function (e) {
myMap.minimap.changeLayer(L.tileLayer.provider(e.name));
})
}")
for (provider in esri) {
mymap <-mymap %>% addProviderTiles(provider, group = provider)
}
mymap
provider
provider
install.packages(c("fields", "gdata", "mapproj", "maps"))
?update.packages
library(ggplot2)
library(RColorBrewer)
? seq_gradient_pal
?brewer.pa
?brewer.pal
brewer.pal("YlGnBu")
?brewer.pal
brewer.pal(7,"BrBG")
seq_gradient_pal(brewer.pal(7,"BrBG"))
? seq_gradient_pal
seq_gradient_pal("#8C510A","#D8B365","#F6E8C3")
scales::seq_gradient_pal("#8C510A","#D8B365","#F6E8C3")
library(ggplot2)
seq_gradient_pal(low ="blue", high = "red",
space = "Lab")
scales::seq_gradient_pal(low ="blue", high = "red",space = "Lab")
scales::seq_gradient_pal("blue", "red", "Lab")
cc <- scales::seq_gradient_pal("blue", "red", "Lab")
cc
library(sp)
library(albersusa)
library(leaflet)
spdf <- rmapshaper::ms_simplify(usa_composite())
pal <- colorNumeric("Blues", domain = spdf$pop_2014)
epsg2163 <- leafletCRS(
crsClass = "L.Proj.CRS",
code = "EPSG:2163",
proj4def = "+proj=laea +lat_0=45 +lon_0=-100 +x_0=0 +y_0=0 +a=6370997 +b=6370997 +units=m +no_defs",
resolutions = 2^(16:7))
leaflet(spdf, options = leafletOptions(crs = epsg2163)) %>%
addPolygons(weight = 1, color = "#444444", opacity = 1,
fillColor = ~pal(pop_2014), fillOpacity = 0.7, smoothFactor = 0.5,
label = ~paste(name, pop_2014),
labelOptions = labelOptions(direction = "auto"))
setwd("D:/R/mapdata/State")
states<-geojsonio::geojson_read("json/us-states.geojson", what = "sp")
states<-geojsonio::geojson_read("us-states.geojson", what = "sp")
states<-geojsonio::geojson_read("us-states.geojson", what = "sp")
states<-geojsonio::geojson_read("us-states.geojson", what = "sp")
states<-geojsonio::geojson_read("us-states.geojson", what = "sp")
options(stringsAsFactors = FALSE,check.names = FALSE)
states<-geojsonio::geojson_read("us-states.geojson", what = "sp")
class(states)
names(states)
m <- leaflet(states) %>%
setView(-96, 37.8, 4) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN')))
m %>% addPolygons()
m %>% addPolygons(
fillColor = ~pal(density),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7)
bins <- c(0, 10, 20, 50, 100, 200, 500, 1000, Inf)
pal <- colorBin("YlOrRd", domain = states$density, bins = bins)
m %>% addPolygons(
fillColor = ~pal(density),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7)
m %>% addPolygons(
fillColor = ~pal(density),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE))
labels <- sprintf(
"<strong>%s</strong><br/>%g people / mi<sup>2</sup>",states$name,states$density)
%>% lapply(htmltools::HTML)
library("dplyr")
labels <- sprintf(
"<strong>%s</strong><br/>%g people / mi<sup>2</sup>",states$name,states$density)
%>% lapply(htmltools::HTML)
?lapply
labels <- sprintf("<strong>%s</strong><br/>%g people / mi<sup>2</sup>",states$name,states$density)
%>% lapply(htmltools::HTML)
labels <- sprintf("<strong>%s</strong><br/>%g people / mi<sup>2</sup>",states$name,states$density) %>% lapply(htmltools::HTML)
labels
m %>% addPolygons(
fillColor = ~pal(density),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE
),
label = labels,
labelOptions = labelOptions(
style=list("font-weight"="normal",padding="3px 8px"),
textsize="15px",
direction="auto")
)
m <-m %>% addPolygons(
fillColor = ~pal(density),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE
),
label = labels,
labelOptions = labelOptions(
style=list("font-weight"="normal",padding="3px 8px"),
textsize="15px",
direction="auto")
)
m %>% addLegend(pal = pal, values = ~density, opacity = 0.7, title = NULL,
position = "bottomright")
